try
     colorscheme snazzy
catch
endtry

set rtp+=/opt/homebrew/opt/fzf
set termguicolors
set nowrap
set cursorline
set hlsearch
set foldenable
set foldlevelstart=10
set foldnestmax=10
set foldmethod=indent
set clipboard=unnamed              " Use system clipboard
set updatetime=1000                " Faster updates for ALE linting

" vim-go specific settings
let g:go_fmt_command = "goimports" " Use goimports for formatting
let g:go_def_mode = 'gopls'        " Use gopls for definition lookup
let g:go_info_mode = 'gopls'       " Use gopls for type info

" ALE configuration
let g:ale_linters = {'go': ['gopls']}
let g:ale_fixers = {'go': ['gofmt', 'goimports']}
let g:ale_fix_on_save = 1

let g:airline_powerline_fonts = 1

let g:NERDTreeNodeDelimiter = "\u00a0"
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDTreeWinPos = "right"
let NERDTreeShowHidden = 1

let g:mix_format_on_save = 0
let g:mix_format_options = '--check-equivalent'
let g:mix_format_silent_errors = 1

" Golang bindings
nnoremap <leader>b :GoBuild<CR>      " Build Go code
nnoremap <leader>r :GoRun<CR>        " Run Go code
nnoremap <leader>t :GoTest<CR>       " Run Go tests
nnoremap <leader>i :GoImports<CR>    " Organize imports
nnoremap gr :GoReferrers<CR>         " Find the references
nnoremap gi :GoImplements<CR>        " Find the implementations

" space to fold/unfold
nnoremap <SPACE> za

" quick save
nnoremap <leader>w :w<CR>

" remove highlights
nnoremap <leader><SPACE> :nohlsearch<CR>

" edit vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<CR>

" reload vimrc
nnoremap <leader>sv :source $MYVIMRC<CR>

" copy to system buffer
vnoremap <leader>y "*y

" search selected
vnoremap // y/<C-R>"<CR>
nnoremap // bvwy/<C-R>"<CR>

" auto indent & close the brace when starting a new code block
inoremap {<CR> {<CR>}<ESC>ko

" select the entire text
vnoremap aa <ESC>gg0vG$

" auto indent entire text
nnoremap == ggVG=

" move the selection up & down
" autocmd BufEnter * nnoremap <C-n> :m .+1<CR>==
" autocmd BufEnter * nnoremap <C-m> :m .-2<CR>==
" autocmd BufEnter * inoremap <C-n> <ESC>:m .+1<CR>==gi
" autocmd BufEnter * inoremap <C-m> <ESC>:m .-2<CR>==gi
" autocmd BufEnter * vnoremap <C-n> :m '>+1<CR>gv=gv
" autocmd BufEnter * vnoremap <C-m> :m '<-2<CR>gv=gv

" navigate the buffers
" autocmd VimEnter * noremap <C-h> <C-w>h
" autocmd VimEnter * noremap <C-j> <C-w>j
" autocmd VimEnter * noremap <C-k> <C-w>k
" autocmd VimEnter * noremap <C-l> <C-w>l

" remove all tailing whitespaces before save
autocmd BufWritePre * %s/\s\+$//e

" search by file name
nnoremap <silent> <C-t> :Files<CR>

" search in files
nnoremap <silent> <C-f> :Rg<CR>
command! -bang -nargs=* Rg call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>), 1, {'options': '--delimiter : --nth 4..'}, <bang>0)

" async search in files
nnoremap <C-g> :CtrlSF<space>

autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd BufRead,BufNewFile *.kubeconfig set filetype=yaml
autocmd BufRead,BufNewFile *.service set filetype=systemd
autocmd BufRead,BufNewFile *.env set filetype=sh
autocmd BufRead,BufNewFile Vagrantfile set filetype=ruby
autocmd BufRead,BufNewFile Dockerfile set filetype=yaml

" format the elixir file
augroup elixir
  au!
  autocmd FileType elixir nnoremap <leader>= :MixFormat<CR>
augroup END
